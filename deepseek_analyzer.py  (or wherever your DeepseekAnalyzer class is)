import os
import openai  # Import the OpenAI library
from config.analyzer_config import ANALYZER_CONFIG  # Import your config
import logging

logger = logging.getLogger(__name__)

class DeepseekAnalyzer:  # Assuming you have this class
    def __init__(self):
        self.config = ANALYZER_CONFIG['deepseek_analyzer']
        self.model_name = self.config['model']['name']
        self.temperature = self.config['model']['temperature']
        self.max_tokens = self.config['model']['max_tokens']
        self.api_endpoint = self.config['model']['api_endpoint']
        self.api_key = os.getenv("DEEPSEEK_API_KEY")  # Get API key from .env

        if not self.api_key:
            raise ValueError("DEEPSEEK_API_KEY not found in .env file")

        openai.api_key = self.api_key  # Set the OpenAI API key
        self.client = openai.OpenAI(api_key=self.api_key, base_url=self.api_endpoint) # Initialize OpenAI client

    async def analyze_text(self, text: str) -> str:
        """Analyzes the given text using the DeepSeek model."""
        try:
            logger.info(f"Analyzing text with DeepSeek model: {self.model_name}")

            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[{"role": "user", "content": text}],
                temperature=self.temperature,
                max_tokens=self.max_tokens,
            )

            result = response.choices[0].message.content.strip()
            logger.info(f"DeepSeek analysis result: {result}")
            return result

        except Exception as e:
            logger.error(f"Error in DeepseekAnalyzer: {e}")
            raise

# Example usage (assuming you have a main function or similar)
async def main():
    analyzer = DeepseekAnalyzer()
    text_to_analyze = "This is a sample text to analyze."
    try:
        analysis_result = await analyzer.analyze_text(text_to_analyze)
        print(f"Analysis Result: {analysis_result}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())